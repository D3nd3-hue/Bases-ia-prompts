“Asistente Virtual para la Gestión del Tiempo"

**Nombre y Apellido del Autor:** Angel Diaz Marin  
**Nombre del Curso:** Inteligencia artificial: Generación de Prompts  
**Nº de Comisión:** 61255  
**Nombre del Proyecto:** "Asistente Virtual para la Gestión del Tiempo"

### Presentación del Problema a Abordar

**Problema Elegido:** Dificultades en la gestión eficiente del tiempo tanto en el ámbito personal como profesional.  
**Relevancia del Problema:** En un mundo cada vez más acelerado y lleno de distracciones, la gestión eficaz del tiempo se ha convertido en un desafío significativo para muchas personas. La mala gestión del tiempo puede llevar a una menor productividad, estrés y una disminución de la calidad de vida.

### Desarrollo de la Propuesta de Solución

**Solución Propuesta:** Desarrollo de un asistente virtual basado en IA que ayude a los usuarios a organizar su tiempo de manera más eficiente.  
**Vinculación con Modelos de IA:** El asistente utilizará modelos de procesamiento del lenguaje natural (NLP) y visión por computadora para entender y responder a las consultas de los usuarios sobre la gestión del tiempo.  
**Prompts de IA:** Implementación de Prompts como "Organizar mi agenda para mañana", "Establecer un recordatorio para la reunión del lunes", o "Sugerir un bloque de tiempo para una sesión de estudio ininterrumpido".
**Funcionalidad Adicional:** Incorporación de capacidades de visión por computadora para interpretar y responder a entradas visuales.

### Ejemplos de Aplicación:

- **Reconocimiento de Escritura Manuscrita:** El asistente podría analizar imágenes de notas escritas a mano y convertirlas en texto digital. Por ejemplo, si un usuario toma una foto de su lista de tareas escrita en papel, el asistente podría digitalizarla y organizarla.
- **Análisis de Calendarios Físicos:** Procesar imágenes de calendarios físicos o planificadores para actualizar automáticamente la agenda digital del usuario.

### Prompts de IA para el Procesamiento de Imágenes

- **Implementación de Prompts:** Como "Digitalizar esta lista de tareas escrita a mano" o "Actualizar mi calendario digital con estos eventos del calendario físico".

### Tecnologías y Herramientas Relevantes

- **IA para el Procesamiento de Imágenes:** Uso de bibliotecas y frameworks como OpenCV, TensorFlow o PyTorch para el reconocimiento de patrones e imágenes.
- **OCR (Reconocimiento Óptico de Caracteres):** Utilizar herramientas de OCR para convertir la escritura manuscrita o impresa en texto editable.

### Mejoras y Optimizaciones Implementadas en el Código (POC)

- **Optimización de Consultas a la API:** Se redujo el número de llamadas a la API de OpenAI, realizando consultas solo cuando el texto extraído es relevante.
- **Fraccionamiento de Problemas:** Se estructuró el código para abordar problemas específicos en funciones separadas, mejorando la claridad y la eficiencia.
- **Indentación y Estructura del Código:** Se siguió un estilo de codificación coherente para mejorar la legibilidad y el mantenimiento del código.
- **POC (Prueba de Concepto):** El código fuente desarrollado forma parte de un POC para demostrar la viabilidad técnica y funcional del asistente virtual en la gestión del tiempo.

### Justificación de la Viabilidad de la Expansión

**Viabilidad Técnica:** Con el avance de las tecnologías de visión por computadora y la disponibilidad de bibliotecas de código abierto, integrar el procesamiento de imágenes es técnicamente factible.

### Justificación de la Viabilidad del Proyecto

**Viabilidad Técnica:** La tecnología de IA actual permite la creación de asistentes virtuales con capacidades de comprensión y respuesta a lenguaje natural. Además, existen APIs y plataformas disponibles que facilitan  la integración de estas capacidades en aplicaciones.

Recursos y Tiempo: Dado el alcance del proyecto y los recursos disponibles (como plataformas de IA de código abierto y tutoriales), es viable desarrollar una versión básica del asistente virtual en el tiempo asignado para el proyecto.






import openai
import cv2
import matplotlib.pyplot as plt
import pytesseract
from PIL import Image
import requests
import numpy as np
import spacy

# Configurar la clave API de OpenAI
openai.api_key = 'tu-clave-api'

def verificar_conexion_internet():
    try:
        requests.get('https://www.google.com/', timeout=5)
        return True
    except requests.ConnectionError:
        return False

def preprocesar_imagen_para_ocr(ruta_imagen):
    imagen = cv2.imread(ruta_imagen, cv2.IMREAD_GRAYSCALE)
    imagen = cv2.equalizeHist(imagen)
    _, imagen_bin = cv2.threshold(imagen, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    imagen_bin = cv2.medianBlur(imagen_bin, 5)
    return imagen_bin

def procesar_imagen_con_ocr(ruta_imagen):
    try:
        imagen_procesada = preprocesar_imagen_para_ocr(ruta_imagen)
        texto = pytesseract.image_to_string(imagen_procesada, lang='spa')
        return texto
    except Exception as e:
        return f"Error al procesar la imagen: {e}"

def procesar_texto_para_gestion_tiempo(texto):
    try:
        prompt = f"Analiza este texto y proporciona sugerencias para organizar las tareas y prioridades: {texto}"
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=100
        )
        return response.choices[0].text.strip()
    except Exception as e:
        return f"Error en procesamiento de texto para gestión de tiempo: {e}"

def mostrar_imagen(ruta_imagen):
    try:
        imagen = cv2.imread(ruta_imagen)
        if imagen is None:
            print("Error al cargar la imagen.")
            return
        imagen_rgb = cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB)
        plt.imshow(imagen_rgb)
        plt.show()
    except Exception as e:
        print(f"Error al mostrar la imagen: {e}")

nlp = spacy.load("es_core_news_sm")

def identificar_tareas_y_recordatorios_mejorado(texto):
    tareas = []
    recordatorios = []
    doc = nlp(texto)
    for sent in doc.sents:
        if "tarea" in sent.text.lower():
            tareas.append(sent.text)
        elif "recordatorio" in sent.text.lower():
            recordatorios.append(sent.text)
    return tareas, recordatorios

def dar_consejos_productividad_personalizados(texto_analizado):
    consejos = [
        "Prioriza tareas según su importancia y urgencia.",
        "Establece bloques de tiempo para trabajar sin distracciones.",
        "Tómate descansos cortos y regulares para mantener la concentración."
    ]
    return consejos

if verificar_conexion_internet():
    ruta_imagen = 'ruta-a-tu-imagen-de-texto.jpg'
    mostrar_imagen(ruta_imagen)
    texto_de_imagen = procesar_imagen_con_ocr(ruta_imagen)
    print("Texto original:", texto_de_imagen)

    # Optimización: Solo se llama a OpenAI si el texto extraído es relevante
    if len(texto_de_imagen.strip()) > 0:
        texto_procesado = procesar_texto_para_gestion_tiempo(texto_de_imagen)
        print("Texto procesado:", texto_procesado)
    else:
        texto_procesado = ""

    tareas, recordatorios = identificar_tareas_y_recordatorios_mejorado(texto_de_imagen)
    print("Tareas identificadas:", tareas)
    print("Recordatorios identificados:", recordatorios)
    
    if texto_procesado:
        consejos = dar_consejos_productividad_personalizados(texto_procesado)
        print("Consejos de Productividad:", consejos)
else:
    print("No hay conexión a Internet. Por favor, verifica tu conexión.")
