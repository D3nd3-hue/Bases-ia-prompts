Nombre del Proyecto: Asistente Virtual para la Gestión del Tiempo

Autor: Angel Diaz Marin

Curso: Inteligencia Artificial: Generación de Prompts

Comisión: 61255

Presentación del Problema a Abordar
Problema Elegido: Dificultades en la gestión eficiente del tiempo en ámbitos personales y profesionales.

Relevancia del Problema: La gestión ineficiente del tiempo puede resultar en baja productividad y estrés, afectando negativamente la calidad de vida en un mundo lleno de distracciones.

Desarrollo de la Propuesta de Solución
Solución Propuesta: Un asistente virtual basado en IA para ayudar en la organización eficiente del tiempo.

Vinculación con Modelos de IA: Uso de modelos de procesamiento de lenguaje natural (NLP) para comprender y responder a consultas relacionadas con la gestión del tiempo.

Prompts de IA: Prompts como "Organizar mi agenda para mañana" y "Establecer un recordatorio para la reunión del lunes".

Expansión de la Propuesta de Solución
Funcionalidad Adicional: Capacidad de interpretar y responder a entradas visuales mediante visión por computadora.

Ejemplos de Aplicación
Reconocimiento de Escritura Manuscrita: Digitalización de notas manuscritas a texto digital.
Análisis de Calendarios Físicos: Actualización automática de la agenda digital a partir de imágenes de calendarios físicos.
Prompts de IA para el Procesamiento de Imágenes
"Digitalizar esta lista de tareas escrita a mano".
"Actualizar mi calendario digital con estos eventos del calendario físico".
Tecnologías y Herramientas Relevantes
IA para el Procesamiento de Imágenes: Uso de OpenCV, TensorFlow, o PyTorch.
OCR (Reconocimiento Óptico de Caracteres): Conversión de texto escrito a mano o impreso en texto editable.
Justificación de la Viabilidad de la Expansión
Viabilidad Técnica: Factible con el avance en tecnologías de visión por computadora y disponibilidad de bibliotecas de código abierto.
Justificación de la Viabilidad del Proyecto
Viabilidad Técnica: Posible con la tecnología de IA actual y la disponibilidad de APIs y plataformas.
Recursos y Tiempo: Factible considerando los recursos disponibles y el tiempo asignado para el proyecto.
Metodología y Implementación
Metodología: Desarrollo iterativo con pruebas continuas de prompts y ajustes basados en resultados.

Codigo fuente

import openai
import ipywidgets as widgets
from IPython.display import display

openai.api_key = 'me la bloquean si la dejo aca pueden aplicar las de ustedes para probar el codigo'

def generar_respuesta_gpt3(texto_entrada):
    try:
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-1106",
            messages=[
                {"role": "system", "content": "Tienes una conversación con un asistente inteligente."},
                {"role": "user", "content": texto_entrada}
            ]
        )
        return respuesta.choices[0].message['content']
    except Exception as e:
        return f"Error: {e}"

# Widget for input text
texto_entrada = widgets.Text(
    value='',
    placeholder='Escribe aquí tu solicitud',
    description='Entrada:',
    disabled=False
)

# Send button
boton_enviar = widgets.Button(
    description='Enviar',
    disabled=False,
    button_style='', 
    tooltip='Haz clic para enviar'
)

# Response display area
area_respuesta = widgets.Output()

# Function to handle the button click event
def al_clicar(boton):
    with area_respuesta:
        area_respuesta.clear_output()
        # Print the welcome message in Spanish
        print("\n¡Bienvenido a nuestro Asistente AI! Estamos aquí para ayudarte con todas tus consultas. No dudes en preguntar cualquier cosa.")
        print(f"Procesando: {texto_entrada.value}")
        respuesta_gpt3 = generar_respuesta_gpt3(texto_entrada.value)
        print(f"Respuesta: {respuesta_gpt3}")

boton_enviar.on_click(al_clicar)

# Display widgets
display(texto_entrada, boton_enviar, area_respuesta)

